
{{#each dependsOn as |i j|}}
  {{component FormElement alias="."}}
{{/each}}

{{#*inline "render_required_label"}}
  <abbr class="slds-required" title="required">*</abbr>
{{/inline}}

{{#*inline "render_message"}}
<div class="slds-form-element__help" id="{{@root.componentId}}_message">
  {{message}}
</div>
{{/inline}}

{{#*inline "render_title_icon"}}
  {{component ButtonIcon alias="titleIcon"}}
  {{#if titleIcon}}
    <div class="slds-form-element__icon {{displayOnlyControl ? "slds-assistive-text" : ""}}">
        {{> titleIcon }}
    </div>
  {{/if}}
{{/inline}}

{{#*inline "render_title"}}
  {{component Text alias="title"}}
    {{#if required}}
      {{> render_required_label}}
    {{/if}}
    {{#if titleText}}
      {{titleText}}
    {{else}}
      {{#if title}}
        {{> title}}
      {{/if}}
    {{/if}}
{{/inline}}

{{#*inline "render_edit_icon_container" visible=true}}

{{!-- Note: If your form element has an Icon or ButtonIcon on the right, ensure to only render it when
readonly is false, so that this edit icon does not display on top of it --}}

  {{#if readonly and editable}}
      {{> ButtonIcon 
            iconType='utility' iconName='edit' 
            cssClass="slds-input__icon slds-input__icon_right"
            svgCssClass="slds-button__icon_edit"
            hint=true
            ref="edit-button"
            marginLeft='x-small'
            on-click='onEditButtonClick'
      }}
  {{/if}}
{{/inline}}

{{#*inline "render_standalone"}}
  <div class="
        slds-form-element 
        {{padding ? 'slds-p-${padding}' : ''}} 
        {{margin ? 'slds-m-${margin}' : ''}} 
        {{> ?standalone_classes}}"
  >

    {{#if readonly neq undefined transform='labelTransform' transient=true}}
      <label class="slds-form-element__label {{displayOnlyControl ? "slds-assistive-text" : ""}}" 
        {{hasInputElement ? "for='${@root.componentId}_input'" : ''}}
        id="{{@root.componentId}}_label"
      >
          {{> render_title}}
      </label>
    {{/if}}

    {{> render_title_icon}}

    <div class="slds-form-element__control {{> ?standalone_control_classes}}">
      
      {{!-- 
        Because of the way we are re-rendering "render_standalone_control", we need to register add the
        hook "loadStandaloneControl" to allow subclasses perform initialization each time the control markup 
        is rendered
       --}}
      
      {{#if readonly hook='loadStandaloneControl' hookPhase='afterMount'}}
        <div class="slds-form-element__static">
          {{> ?render_standalone_control}}
        </div>
      {{else}}
        {{> ?render_standalone_control}}
      {{/if}}

      {{> render_edit_icon_container}}
    </div>
    {{#if message}}
      {{> render_message}}
    {{/if}}

    <div id="{{@root.componentId}}-popup-widget"></div>

  </div>
{{/inline}}


{{#*inline "render_compound" visible=true}}
  <fieldset class="slds-form-element {{padding ? 'slds-p-${padding}' : ''}} {{margin ? 'slds-m-${margin}' : ''}} {{visible ? "slds-visible" : "slds-hidden"}} {{required ? 'slds-is-required' : ''}} {{> ?compound_classes}}">
    
    <legend class="slds-form-element__legend slds-form-element__label {{displayOnlyControl ? "slds-assistive-text" : ""}}">
      {{> render_title}}
    </legend>

    {{> render_title_icon}}
    
    <div class="slds-form-element__control {{> ?compound_control_classes}}">
      {{> ?render_compound_control}}
      {{> render_edit_icon_container}}
      {{#if message}}
        {{> render_message}}
      {{/if}}
    </div>
  </fieldset>
{{/inline}}


{{#*inline "render_form_element" visible=true}}
  {{#if isCompound}}
    {{> render_compound visible}}
  {{else}}
    {{> render_standalone visible}}
  {{/if}}
{{/inline}}
